import { useState, useRef, useEffect } from 'react'
import MessageFeedback from './MessageFeedback'

interface Message {
  id: string
  text: string
  isUser: boolean
  timestamp: Date
}

interface JarvisChatProps {
  isOpen: boolean
  onClose: () => void
}

export default function JarvisChat({ isOpen, onClose }: JarvisChatProps) {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: '–ü—Ä–∏–≤–µ—Ç! –Ø –î–ñ–ê–†–í–ò–°, –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
      isUser: false,
      timestamp: new Date()
    }
  ])
  const [inputText, setInputText] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const [interactionIds, setInteractionIds] = useState<{[messageId: string]: string}>({})
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const textareaRef = useRef<HTMLTextAreaElement>(null)
  const sessionId = useRef(`session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`)

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
  const saveInteractionToLearning = async (userMessage: string, botResponse: string, aiMessageId: string) => {
    try {
      const response = await fetch('/api/learning', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'save_interaction',
          userMessage,
          botResponse,
          sessionId: sessionId.current,
          context: messages.slice(-3).map(m => m.text),
          tags: extractTags(userMessage + ' ' + botResponse)
        }),
      })

      if (response.ok) {
        const data = await response.json()
        if (data.success) {
          setInteractionIds(prev => ({
            ...prev,
            [aiMessageId]: data.data.interactionId
          }))
          console.log('Interaction saved for learning:', data.data.interactionId)
        }
      } else {
        console.error('Failed to save interaction, status:', response.status)
      }
    } catch (error) {
      console.error('Error saving interaction for learning:', error)
      // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    }
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
  const extractTags = (text: string): string[] => {
    const commonTags = [
      '–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–¥–∏–∑–∞–π–Ω', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', 'ai', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
      '—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥', '–±—ç–∫–µ–Ω–¥', 'react', 'javascript', 'typescript', 'css',
      'html', 'api', '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', '—Å–µ—Ç—å', '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'
    ]

    const lowerText = text.toLowerCase()
    return commonTags.filter(tag => lowerText.includes(tag))
  }

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  // Auto resize textarea
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto'
      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`
    }
  }, [inputText])

  const generateJarvisResponse = async (userMessage: string, conversationHistory: Message[]): Promise<string> => {
    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è API
      const apiMessages = conversationHistory
        .filter(msg => msg.text !== '–ü—Ä–∏–≤–µ—Ç! –Ø –î–ñ–ê–†–í–ò–°, –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?') // –ò—Å–∫–ª—é—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        .map(msg => ({
          role: msg.isUser ? 'user' as const : 'assistant' as const,
          content: msg.text
        }))

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      apiMessages.push({
        role: 'user',
        content: userMessage
      })

      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages: apiMessages
        }),
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const data = await response.json()

      if (data.error) {
        throw new Error(data.error)
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
      if (!data.message || data.message.trim().length === 0) {
        console.warn('Empty response from API, using fallback')
        return '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–ª—É—á–∏–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å! ü§î'
      }

      return data.message
    } catch (error) {
      console.error('Error calling AI API:', error)

      // –†–µ–∑–µ—Ä–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      const fallbackResponses = [
        '–Ø –î–ñ–ê–†–í–ò–° –∏ —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è - –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ! üöÄ',
        '–ü—Ä–∏–≤–µ—Ç! –Ø –î–ñ–ê–†–í–ò–° –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π! ‚ú®',
        '–Ø –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ AI! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üîß',
      ]

      return fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)]
    }
  }

  const handleSendMessage = async () => {
    if (!inputText.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputText,
      isUser: true,
      timestamp: new Date()
    }

    const currentInput = inputText
    setMessages(prev => [...prev, userMessage])
    setInputText('')
    setIsTyping(true)

    try {
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
      const aiText = await generateJarvisResponse(currentInput, [...messages, userMessage])

      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: aiText,
        isUser: false,
        timestamp: new Date()
      }

      setMessages(prev => [...prev, aiResponse])

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
      if (aiText && aiText.trim().length > 0) {
        await saveInteractionToLearning(currentInput, aiText, aiResponse.id)
      } else {
        console.log('Skipping learning save: empty AI response')
      }
    } catch (error) {
      console.error('Error generating AI response:', error)

      const errorResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
        isUser: false,
        timestamp: new Date()
      }

      setMessages(prev => [...prev, errorResponse])
    } finally {
      setIsTyping(false)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }


  if (!isOpen) return null

  return (
    <div className="jarvis-chat-overlay modal">
      <div className="jarvis-chat-container-modal">
        {/* Header */}
        <div className="jarvis-chat-header">
          <div className="jarvis-chat-title">
            <div className="jarvis-avatar">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                <path d="M12 2L2 7v10c0 5.55 3.84 9.74 9 11 5.16-1.26 9-5.45 9-11V7l-10-5z"/>
                <path d="M9 12l2 2 4-4" stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" fill="none"/>
              </svg>
            </div>
            <div>
              <h3>–î–ñ–ê–†–í–ò–°</h3>
              <div className="status-indicator">
                –í —Å–µ—Ç–∏
              </div>
            </div>
          </div>
          <button className="jarvis-close-btn" onClick={onClose}>
            <svg width="18" height="18" viewBox="0 0 24 24" fill="none">
              <path d="M18 6L6 18M6 6l12 12" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
            </svg>
          </button>
        </div>

        {/* Messages */}
        <div className="jarvis-messages">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`message ${message.isUser ? 'user-message' : 'ai-message'}`}
            >
              {!message.isUser && (
                <div className="message-avatar">
                  <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 2L2 7v10c0 5.55 3.84 9.74 9 11 5.16-1.26 9-5.45 9-11V7l-10-5z"/>
                    <path d="M9 12l2 2 4-4" stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" fill="none"/>
                  </svg>
                </div>
              )}
              <div className="message-content">
                <div className="message-bubble">
                  {message.text.trim().split('\n').filter(line => line.trim()).map((line, index) => (
                    <div key={index}>
                      {line.trim()}
                      {index < message.text.trim().split('\n').filter(line => line.trim()).length - 1 && <br />}
                    </div>
                  ))}
                </div>
                {!message.isUser && interactionIds[message.id] && (
                  <MessageFeedback
                    interactionId={interactionIds[message.id]}
                    onFeedbackSent={(rating) => {
                      console.log(`Feedback sent for message ${message.id}: ${rating}`)
                    }}
                  />
                )}
              </div>
            </div>
          ))}
          
          {isTyping && (
            <div className="message ai-message">
              <div className="message-avatar">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M12 2L2 7v10c0 5.55 3.84 9.74 9 11 5.16-1.26 9-5.45 9-11V7l-10-5z"/>
                  <path d="M9 12l2 2 4-4" stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" fill="none"/>
                </svg>
              </div>
              <div className="message-content">
                <div className="message-bubble typing-indicator">
                  <div className="typing-dots">
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>

        {/* Input */}
        <div className="jarvis-input-area">
          <div className="jarvis-input-container">
            <textarea
              ref={textareaRef}
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ –î–ñ–ê–†–í–ò–°–£..."
              className="jarvis-textarea"
              rows={1}
              disabled={isTyping}
            />
            <button
              onClick={handleSendMessage}
              disabled={!inputText.trim() || isTyping}
              className="jarvis-send-btn"
            >
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                <path d="M7 11L12 6L17 11" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                <path d="M12 18V6" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
              </svg>
            </button>
          </div>
        </div>
      </div>

    </div>
  )
}
