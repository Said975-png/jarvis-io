import React, { useState, useRef, useEffect } from 'react'
import { ChatHistoryManager, ChatSession, Message } from '../lib/chatHistory'
import { useTheme } from '../contexts/ThemeContext'
import MessageFeedback from './MessageFeedback'

interface ChatGPTProps {
  isOpen: boolean
  onClose: () => void
}

export default function ChatGPT({ isOpen, onClose }: ChatGPTProps) {
  const { isDarkTheme } = useTheme()
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: '–ü—Ä–∏–≤–µ—Ç! –Ø –î–ñ–ê–†–í–ò–° - –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –Ω–∞—à–µ–≥–æ —Å–∞–π—Ç–∞! üòä\n\n–ü–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥–∏, —Ä–∞—Å—Å–∫–∞–∂—É ÔøΩÔøΩ —Ç–∞—Ä–∏—Ñ–∞—Ö –∏ –æ—Ç–≤–µ—á—É –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã\n\n–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?',
      isUser: false,
      timestamp: new Date()
    }
  ])
  const [currentThinkingText, setCurrentThinkingText] = useState('')
  const [inputText, setInputText] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const [isUploadingFile, setIsUploadingFile] = useState(false)
  const [interactionIds, setInteractionIds] = useState<{[messageId: string]: string}>({})

  // –ì–æÔøΩÔøΩ–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  const [isListening, setIsListening] = useState(false)
  const [voiceMode, setVoiceMode] = useState<'text' | 'voice'>('voice') // 'text' = —Ç–æ–ª—åÔøΩÔøΩ–æ —Ç–µ–∫—Å—Ç, 'voice' = —Ç–µ–∫—Å—Ç + –≥–æ–ª–æ—Å
  const [recognition, setRecognition] = useState<SpeechRecognition | null>(null)
  const [speechSynthesis, setSpeechSynthesis] = useState<SpeechSynthesis | null>(null)
  const [autoSendTimer, setAutoSendTimer] = useState<NodeJS.Timeout | null>(null)
  const [silenceTimer, setSilenceTimer] = useState<NodeJS.Timeout | null>(null)
  const inputTextRef = useRef('')

  // ElevenLabs –∫–ª—é—á–∏ (4 –∫–ª—é—á–∞ —Å —Ä–∞–∑–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ - –û–ë–ù–û–í–õ–ï–ù–´)
  const [elevenLabsKeys] = useState([
    { key: 'sk_1df0aad8b96f47707c32565c8a91421e994da2f1858563f1', isActive: true, usage: 0, limit: 10000, errorCount: 0 }, // –ö–ª—é—á 1
    { key: 'sk_5db328d5ec7cec7e73430d76b064cfb0c883cbc757497b22', isActive: true, usage: 0, limit: 10000, errorCount: 0 }, // –ö–ª—é—á 2
    { key: 'sk_069e38bd4f02f37b61dce186ba7147400b62b49ba5ce2a6b', isActive: true, usage: 0, limit: 10000, errorCount: 0 }, // –ö–ª—é—á 3
    { key: 'sk_461e30f29ff6c05c74b34778cb0933a05b641f27bf766ab0', isActive: true, usage: 0, limit: 10000, errorCount: 0 }, // –ö–ª—é—á 4
  ])

  const fileInputRef = useRef<HTMLInputElement>(null)
  
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const textareaRef = useRef<HTMLTextAreaElement>(null)
  const sessionId = useRef(`session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`)

  // –û–±–Ω–æ–≤–ª—è–µ–º ref –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ inputText
  useEffect(() => {
    inputTextRef.current = inputText
  }, [inputText])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–ªÔøΩÔøΩ—Ö API
  useEffect(() => {
    if (typeof window !== 'undefined') {
      // Speech Recognition API
      const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition
      if (SpeechRecognition) {
        const recognitionInstance = new SpeechRecognition()
        recognitionInstance.continuous = true // –í–∫–ª—é—á–∞–µ–º –Ω–µ–øÔøΩÔøΩ–µ—Ä—ã–≤–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–ΩÔøΩÔøΩ–≤–∞ÔøΩÔøΩ–∏–µ
        recognitionInstance.interimResults = true // –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–ºÔøΩÔøΩ–∂—É—Ç–æ—á–ΩÔøΩÔøΩ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        recognitionInstance.lang = 'ru-RU'

        recognitionInstance.onresult = (event: any) => {
          let finalTranscript = ''
          let interimTranscript = ''

          for (let i = event.resultIndex; i < event.results.length; i++) {
            const transcript = event.results[i][0].transcript
            if (event.results[i].isFinal) {
              finalTranscript += transcript
            } else {
              interimTranscript += transcript
            }
          }

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ UX (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)
          if (interimTranscript) {
            console.log('üîÑ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç:', interimTranscript)
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º (–∑–∞–º–µ–Ω—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º)
            setInputText(interimTranscript)
          }

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫—É
          if (finalTranscript) {
            console.log('üìù –ü–æ–ª—É—á–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç:', finalTranscript)
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞ÔøΩÔøΩ–º —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (–Ω–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º)
            setInputText(finalTranscript.trim())
            inputTextRef.current = finalTranscript.trim()

            // –û—á–∏—â–∞–µ–º —Å—É—â–µÔøΩÔøΩ—Ç–≤—É—é—âÔøΩÔøΩ–π —Ç–∞–π–º–µ—Ä
            if (autoSendTimer) {
              clearTimeout(autoSendTimer)
              console.log('‚è∞ –û—á–∏—â–µ–Ω –ø—Ä–µÔøΩÔøΩ—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∏')
            }

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–æÔøΩÔøΩ–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–ª–æ–≤
            console.log('‚è±Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∏ (2 —Å–µ–∫)')
            const timer = setTimeout(() => {
              console.log('üöÄ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è')
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ ref
              const currentText = inputTextRef.current?.trim()
              if (currentText && currentText.length > 0) {
                console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', currentText)
                handleVoiceAutoSend(currentText)
              } else {
                console.log('‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ')
                setInputText('')
                inputTextRef.current = ''
              }
              setIsListening(false)
              recognitionInstance.stop()
            }, 2000) // 2 —Å–µ–∫—É–Ω–¥ÔøΩÔøΩ

            setAutoSendTimer(timer)
          }
        }

        recognitionInstance.onspeechstart = () => {
          console.log('üé§ –ù–∞—á–∞–ª–æ —Ä–µ—á–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ')
          // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä —Ç–∏—à–∏–Ω—ã –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ—á–∏
          if (silenceTimer) {
            clearTimeout(silenceTimer)
            setSilenceTimer(null)
            console.log('üîá –¢–∞–π–º–µ—Ä —Ç–∏—à–∏–Ω—ã –æ—á–∏—â–µ–Ω (—Ä–µ—á—å –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª–∞—Å—å)')
          }
        }

        recognitionInstance.onspeechend = () => {
          console.log('üîá –ö–æ–Ω–µ—Ü —Ä–µ—á–∏, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Ç–∏—à–∏–Ω—ã (3 —Å–µ–∫)')
          // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Ç–∏—à–∏–Ω—ã
          const timer = setTimeout(() => {
            console.log('üò¥ –î–ª–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∏—à–∏–Ω–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ')
            setIsListening(false)
            recognitionInstance.stop()
          }, 3000) // 3 —Å–µ–∫—É–Ω–¥—ã —Ç–∏—à–∏–Ω—ã
          setSilenceTimer(timer)
        }

        recognitionInstance.onerror = (event: any) => {
          console.error('Speech recognition error:', event.error)

          // –ò–≥–Ω–æ—ÄÔøΩÔøΩ—Ä—É–µ–º –æ—à–∏–±–∫–∏ "no-speech" (–æ—Ç—Å—É—Ç—Å—ÇÔøΩÔøΩ–∏–µ —Ä–µ—á–∏) - —ç—Ç–æ –Ω–æ—Ä–ºÔøΩÔøΩ–ª—å–Ω–æ
          if (event.error === 'no-speech') {
            console.log('‚ö†Ô∏è –ù–µ—Ç —Ä–µ—á–∏ - –æ–∂–∏–¥ÔøΩÔøΩ–µ–º –¥–∞–ª—å—à–µ')
            return
          }

          // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
          setIsListening(false)

          // –û—á–∏—â–∞–µ–º ÔøΩÔøΩ–∞–π–º–µ—Ä—ã
          if (autoSendTimer) {
            clearTimeout(autoSendTimer)
            setAutoSendTimer(null)
          }
          if (silenceTimer) {
            clearTimeout(silenceTimer)
            setSilenceTimer(null)
          }
        }

        recognitionInstance.onend = () => {
          console.log('üõë –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
          setIsListening(false)

          // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
          if (autoSendTimer) {
            clearTimeout(autoSendTimer)
            setAutoSendTimer(null)
          }
          if (silenceTimer) {
            clearTimeout(silenceTimer)
            setSilenceTimer(null)
          }
        }

        setRecognition(recognitionInstance)
      }

      // Speech Synthesis API
      if (window.speechSynthesis) {
        setSpeechSynthesis(window.speechSynthesis)

        // –§–æ—Ä—Å–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≥–æ–ª–æ—Å–æ–≤ (—Ä–∞–±–æ—Ç–∞–µÔøΩÔøΩ –≤ –±–æ–ª—å—à–∏–Ω—ÅÔøΩÔøΩ–≤–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤)
        const forceLoadVoices = () => {
          // –°–æ–∑–¥–∞–µ–º –ø—É—Å—ÇÔøΩÔøΩ–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ —á—Ç–æ–±—ã –∞–∫—Ç–ª—é–≤–∏—ÄÔøΩÔøΩ–≤–∞—ÇÔøΩÔøΩ –≥–æ–ª–æ—Å–∞
          const utterance = new SpeechSynthesisUtterance('')
          window.speechSynthesis.speak(utterance)
          window.speechSynthesis.cancel()
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥ÔøΩÔøΩ–ª–æ—Å–∞ (–Ω–µ–∫–æ—Ç–æ—Ä—á–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç –∏—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        const loadVoices = () => {
          const voices = window.speechSynthesis.getVoices()
          const russianVoices = voices.filter(v => v.lang.includes('ru') || v.lang.includes('RU'))
          console.log('üé§ –†—É—Å—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', russianVoices.length)
          russianVoices.forEach(v => console.log(`  - ${v.name} (${v.lang}) ${v.localService ? '[–õ–æ–∫–∞–ª—å–Ω—ã–π]' : '[–û–Ω–ª–∞–π–Ω]'}`))
        }

        // –ü–æ–ø—ã—Ç–∫–∞ 1: –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ä–∞–∑—É
        if (window.speechSynthesis.getVoices().length > 0) {
          loadVoices()
        } else {
          // –ü–æ–ø—ã—Ç–∫–∞ 2: —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
          forceLoadVoices()
          setTimeout(loadVoices, 100)
        }

        // –ü–æ–ø—ã—Ç–∫–∞ 3: –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—ÅÔøΩÔøΩÔøΩÔøΩ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤
        window.speechSynthesis.onvoiceschanged = () => {
          loadVoices()
        }

        // –ü–æ–ø—ã—Ç–∫–∞ 4: –¥–æ–ø–æ–ª–Ω–∏—ÇÔøΩÔøΩ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
        setTimeout(() => {
          if (window.speechSynthesis.getVoices().length === 0) {
            forceLoadVoices()
            setTimeout(loadVoices, 200)
          }
        }, 1000)
      }
    }
  }, [])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
  const saveInteractionToLearning = async (userMessage: string, botResponse: string, userMessageId: string) => {
    try {
      console.log('=== SAVING INTERACTION TO LEARNING ===')
      console.log('userMessage:', userMessage)
      console.log('botResponse:', botResponse)
      console.log('sessionId:', sessionId.current)

      const controller = new AbortController()
      const timeoutId = setTimeout(() => controller.abort(), 10000) // 10 second timeout

      const response = await fetch('/api/learning', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'save_interaction',
          userMessage,
          botResponse,
          sessionId: sessionId.current,
          context: messages.slice(-3).map(m => m.text), // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
          tags: extractTags(userMessage + ' ' + botResponse)
        }),
        signal: controller.signal
      })

      clearTimeout(timeoutId)

      if (response.ok) {
        const data = await response.json()
        if (data.success) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–∑–ª—é–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å–≤—è–∑–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–ª—é
          setInteractionIds(prev => ({
            ...prev,
            [userMessageId]: data.data.interactionId
          }))
          console.log('Interaction saved for learning:', data.data.interactionId)
        }
      } else {
        console.error('Failed to save interaction, status:', response.status)
      }
    } catch (error) {
      console.error('Error saving interaction for learning:', error)
      // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏ –æ—à–∏–±–∫ÔøΩÔøΩ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      // –≠—Ç–æ –Ω–µ –∫—Ä–∏ÔøΩÔøΩ–∏—á–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–∞—Ç–∞
    }
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
  const extractTags = (text: string): string[] => {
    const commonTags = [
      '–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–¥–∏–∑–∞–πÔøΩÔøΩ', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', 'ai', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
      '—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥', '–±—ç–∫–µ–Ω–¥', 'react', 'javascript', 'typescript', 'css',
      'html', 'api', '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', '—Å–µ—Ç—å', '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', 'ui', 'ux'
    ]

    const lowerText = text.toLowerCase()
    return commonTags.filter(tag => lowerText.includes(tag))
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑ÔøΩÔøΩ–ø—É—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
  const startListening = () => {
    if (recognition && !isListening) {
      console.log('üéôÔ∏è –ó–ê–ü–£–°–ö –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —Å –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–æ–π')
      console.log('üßπ –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏')
      setInputText('') // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
      inputTextRef.current = '' // –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º ref
      setIsListening(true)

      try {
        recognition.start()
        console.log('‚úÖ Speech Recognition —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω')
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', error)
        setIsListening(false)
      }
    } else {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å: recognition –Ω–µ –≥–æ—Ç–æ–≤ –∏–ª–∏ —É–∂ÔøΩÔøΩ —Å–ª—É—à–∞–µ—Ç')
    }
  }

  // –§ÔøΩÔøΩ–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ ÔøΩÔøΩ–≤–æ–¥–∞
  const stopListening = () => {
    if (recognition && isListening) {
      console.log('‚èπÔøΩÔøΩ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞')
      recognition.stop()
      setIsListening(false)

      // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
      if (autoSendTimer) {
        clearTimeout(autoSendTimer)
        setAutoSendTimer(null)
      }
      if (silenceTimer) {
        clearTimeout(silenceTimer)
        setSilenceTimer(null)
      }
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–µ–≥–æ –º—É–∂—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞
  const getBestMaleVoice = () => {
    const voices = speechSynthesis.getVoices()
    let selectedVoice = null

    console.log('üîç –ü–æ–∏—Å–∫ –≥–æ–ª–æ—Å–æ–≤. –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ:', voices.length)

    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Ä—É—Å—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const russianVoices = voices.filter(v => v.lang.includes('ru') || v.lang.includes('RU'))
    console.log('üá∑üá∫ –†—É—Å—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞:', russianVoices.map(v => `${v.name} (${v.lang}) ${v.localService ? '[–õ–æ–∫–∞–ª—å–Ω—ã–π]' : '[–û–Ω–ª–∞–π–Ω]'}`))

    // –ü–†–ò–û–†–ò–¢–ï–¢ 1: ÔøΩÔøΩÔøΩÔøΩ–∞–º—ã–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º—É–∂—ÅÔøΩÔøΩ–∏–µ –≥–æ–ª–æ—Å–∞ (–º–µ–Ω–µ–µ —Ä–æ–±–æ—Ç–∏—á–Ω—ã–µ)
    const premiumMaleVoices = [
      'Google —Ä—É—Å—Å–∫–∏–π (–†–æ—Å—Å–∏—è)', // –°–∞–º—ã–π –∫–∞—á–µ—Å—Ç–≤ÔøΩÔøΩ–Ω–Ω—ã–π –µ—Å–ª–∏ –µ—Å—Ç—å
      'Microsoft Pavel - Russian (Russia)', // MS Neural –≥–æ–ª–æ—Å
      'Google —Ä—É—Å—Å–∫–∏–π',
      'Pavel (Enhanced)', // –ï—Å–ª–∏ –µÔøΩÔøΩÔøΩÔøΩ—å —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
      'Yuri (Natural)', // –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π ÔøΩÔøΩ–∞—Ä–∏–∞–Ω—Ç
      'Microsoft Pavel',
      'Pavel',
      'Yuri'
    ]

    for (const premiumVoice of premiumMaleVoices) {
      selectedVoice = russianVoices.find(v =>
        v.name.toLowerCase().includes(premiumVoice.toLowerCase())
      )
      if (selectedVoice) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≥–æ–ª–æ—Å:', selectedVoice.name)
        break
      }
    }

    // –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–∞ (–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ)
    if (!selectedVoice) {
      const qualityVoices = [
        'Google —Ä—É—Å—Å–∫–∏–π',
        'Microsoft Irina - Russian (Russia)', // –•–æ—Ç—è –∂–µ–Ω—Å–∫–∏–π, –Ω–æ –∫–∞—á–µ—Å—Ç–ª—é–µ–Ω–Ω—ã–π
        'Russian (Russia)',
        'ru-RU'
      ]

      for (const quality of qualityVoices) {
        selectedVoice = russianVoices.find(v =>
          v.name.includes(quality) && v.localService
        )
        if (selectedVoice) {
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –≥–æ–ª–æ—Å:', selectedVoice.name)
          break
        }
      }
    }

    // –ü–†–ò–û–†–ò–¢–ï–¢ 3: –õ—é–±–æ–π —Ä—É—ÅÔøΩÔøΩ–∫–∏–π –≥–æ–ª–æ—Å
    if (!selectedVoice) {
      selectedVoice = russianVoices.find(v => v.localService) || russianVoices[0]
      if (selectedVoice) {
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π ÔøΩÔøΩ–æ–ª–æ—Å:', selectedVoice.name)
      }
    }

    return selectedVoice
  }

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ ElevenLabs –∫–ª—é—áÔøΩÔøΩ (ÔøΩÔøΩ–∏—Å—Ç–µÔøΩÔøΩÔøΩÔøΩ —Ä–æ—Ç–∞—Ü–∏–∏ –∫–∞–∫ —É OpenRouter)
  const getNextAvailableElevenLabsKey = () => {
    // ÔøΩÔøΩ—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –ª–∏–º–∏—Ç–æ–º
    const availableKeys = elevenLabsKeys.filter(k =>
      k.isActive && k.key.length > 0 && k.usage < k.limit && k.errorCount < 3
    )

    if (availableKeys.length > 0) {
      console.log(`üîë –î–æ—Å—Ç—É–ø–Ω–æ ElevenLabs –∫–ª—é—á–µ–π: ${availableKeys.length}`)
      return availableKeys[0].key
    }

    // –ï—Å–ª–∏ –≤—Å–µ –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—ÇÔøΩÔøΩ–∏–∫ÔøΩÔøΩ (–Ω–æ–≤—ã–π –º–µ—Å—è—Ü)
    const keysWithLimitReached = elevenLabsKeys.filter(k => k.usage >= k.limit)
    if (keysWithLimitReached.length > 0) {
      console.log('üîÑ –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ ElevenLabs –∫ÔøΩÔøΩÔøΩÔøΩ—á–µ–π (–Ω–æ–≤—ã–π –º–µ—Å—è—Ü)')
      keysWithLimitReached.forEach(k => {
        k.usage = 0
        k.errorCount = 0
        k.isActive = true
      })

      const resetKey = elevenLabsKeys.find(k => k.key.length > 0)
      return resetKey ? resetKey.key : null
    }

    return null
  }

  // –û—Ç–º–µ—Ç–∏—Ç—å –∫–ª—é—á –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
  const markElevenLabsKeyAsProblematic = (apiKey: string, error: string) => {
    const keyInfo = elevenLabsKeys.find(k => k.key === apiKey)
    if (keyInfo) {
      keyInfo.errorCount++
      if (keyInfo.errorCount >= 3) {
        keyInfo.isActive = false
        console.log(`‚ùå ElevenLabs –∫–ª—é—á –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ—Å–ª–µ 3 –æ—à–∏–±–æ–∫: ${apiKey.substring(0, 8)}...`)
      }
      console.log(`‚ö†Ô∏è ElevenLabs –æ—à–∏–±–∫–∞ (${keyInfo.errorCount}/3): ${error}`)
    }
  }

  // –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞
  const updateElevenLabsUsage = (apiKey: string, charactersUsed: number) => {
    const keyInfo = elevenLabsKeys.find(k => k.key === apiKey)
    if (keyInfo) {
      keyInfo.usage += charactersUsed
      console.log(`üìä ElevenLabs –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${keyInfo.usage}/${keyInfo.limit} ÔøΩÔøΩ–∏–º–≤–æ–ª–æ–≤`)

      if (keyInfo.usage >= keyInfo.limit) {
        keyInfo.isActive = false
        console.log(`üö´ ElevenLabs –∫–ª—é—á –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç: ${apiKey.substring(0, 8)}...`)
      }
    }
  }

  // ÔøΩÔøΩ—É–Ω–∫—Ü–∏—è –¥–ª—è ElevenLabs TTS (–ø—Ä–µÔøΩÔøΩ—é–∏—É–º –∫–∞—á–µ—Å—Ç–≤–æ)
  const speakWithElevenLabs = async (text: string): Promise<boolean> => {
    const apiKey = getNextAvailableElevenLabsKey()

    if (!apiKey) {
      console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö ElevenLabs –∫–ª—é—á–µ–π, fallback –Ω–∞ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π TTS')
      return false
    }

    try {
      console.log(`üé§ –ò—Å–ø–æ–ª—å–∑—É–µ–º ElevenLabs –∫–ª—é—á: ${apiKey.substring(0, 8)}...`)

      // –°–æ–∑–¥–∞–µ–º AbortController –¥–ª—è timeout –∫–æ–Ω—Ç—Ä–æ–ª—è
      const controller = new AbortController()
      const timeoutId = setTimeout(() => {
        controller.abort()
      }, 15000) // 15 —Å–µ–∫—É–Ω–¥ timeout

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä—É—Å—Å–∫–∏–π –º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å –±–µ–∑ –∞–∫—Ü–µ–Ω—Ç–∞ (–ª—É—á—à–∏–π –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞)
      const voiceId = 'bVMeCyTHy58xNoL34h3p' // Jeremy (—Ä—É—Å—Å–∫–∏–π –º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å –±–µ–∑ –∞–∫—Ü–µ–Ω—Ç–∞, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ)

      const response = await fetch(`https://api.elevenlabs.io/v1/text-to-speech/${voiceId}`, {
        method: 'POST',
        headers: {
          'Accept': 'audio/mpeg',
          'Content-Type': 'application/json',
          'xi-api-key': apiKey
        },
        body: JSON.stringify({
          text: text,
          model_id: 'eleven_multilingual_v2', // –õ—É—á—à–µ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑ÔøΩÔøΩ–∫–∞
          voice_settings: {
            stability: 0.90, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —á–µ—Ç–∫–æ–≥–æ —Ä—É—Å—Å–∫–æ–≥–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
            similarity_boost: 0.85, // ÔøΩÔøΩ–ª—É—á—à–µÔøΩÔøΩ–Ω–∞—è –ø–æ—Ö–æ–∂–µ—Å—Ç—å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≥–æ–ª–æ—Å
            style: 0.1, // –ù–µ–±–æ–ª—å—à–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
            use_speaker_boost: true // –£—Å–∏–ª–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤—É–∫–∞
          }
        }),
        signal: controller.signal // –î–æ–±–∞–≤–ª—è–µ–º abort signal
      })

      // –û—á–∏—â–∞–µ–º timeout –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
      clearTimeout(timeoutId)

      if (response.ok) {
        const audioBlob = await response.blob()
        const audioUrl = URL.createObjectURL(audioBlob)
        const audio = new Audio(audioUrl)

        // üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
        audio.preload = 'auto'
        audio.volume = 1.0

        audio.onended = () => {
          URL.revokeObjectURL(audioUrl)
          console.log('‚úÖ ElevenLabs TTS –∑–∞–≤–µ—Ä—à–µ–Ω')
        }

        audio.onerror = () => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è ElevenLabs –∞—É–¥–∏ÔøΩÔøΩ')
          URL.revokeObjectURL(audioUrl)
        }

        // üöÄ –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
        audio.play().then(() => {
          console.log('üéµ ElevenLabs TTS –Ω–∞—á–∞–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ú–ì–ù–û–í–ï–ù–ù–û')
        }).catch(error => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error)
        })

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æÔøΩÔøΩ—å–∑–æ–≤–∞–Ω–∏—è
        updateElevenLabsUsage(apiKey, text.length)

        console.log('üéµ ElevenLabs TTS —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω')
        return true

      } else {
        let errorMessage = 'Unknown error'
        try {
          const errorData = await response.json()
          errorMessage = errorData.detail?.message || errorData.message || `HTTP ${response.status}`
        } catch {
          errorMessage = `HTTP ${response.status}`
        }

        markElevenLabsKeyAsProblematic(apiKey, errorMessage)

        if (response.status === 401) {
          console.log('üîë –ùÔøΩÔøΩÔøΩ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á ElevenLabs, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π...')
        } else if (response.status === 429) {
          console.log('‚è∞ –õ–∏–º–∏—Ç ElevenLabs –ø—Ä–µ–≤—ã—à–µ–Ω, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á...')
        }

        return false
      }

    } catch (error) {
      let errorMessage = 'Network error'

      if (error instanceof Error) {
        if (error.name === 'AbortError') {
          errorMessage = 'Request timeout (15s)'
          console.error('‚è∞ ElevenLabs timeout –ø–æ—Å–ª–µ 15 —Å–µ–∫—É–Ω–¥')
        } else if (error.message.includes('Failed to fetch')) {
          errorMessage = 'Network connectivity issue'
          console.error('üåê ElevenLabs —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
        } else {
          errorMessage = error.message
          console.error('üí• ElevenLabs –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message)
        }
      } else {
        console.error('üí• ElevenLabs –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
      }

      markElevenLabsKeyAsProblematic(apiKey, errorMessage)
      return false
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (—Ç–µ–ø–µ—Ä—å ÔøΩÔøΩ ElevenLabs + fallback)
  const speakText = async (text: string) => {
    console.log('üéµ speakText –≤—ã–∑–≤–∞–Ω–∞. voiceMode:', voiceMode, 'text:', text.substring(0, 30) + '...')
    if (voiceMode !== 'voice') {
      console.log('‚ùå –ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ')
      return
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    if (speechSynthesis) {
      speechSynthesis.cancel()
    }

    // –û—á–∏—â–∞–µ–º –ª—é–µ–∫—Å—Ç
    const cleanText = text
      .replace(/[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/gu, '')
      .replace(/[‚Ä¢ÔøΩÔøΩ]/g, '')
      .replace(/\n+/g, '. ')
      .trim()

    if (!cleanText) return

    console.log('ÔøΩÔøΩÔøΩÔøΩ === –ù–ê–ß–ò–ù–ê–ï–ú –û–ó–í–£–ß–ò–í–ê–ù–ò–ï ===')
    console.log(`üìù –¢–µ–∫ÔøΩÔøΩ—Ç: ${cleanText.substring(0, 50)}...`)

    // –≠–¢–ê–ü 1: –ü—Ä–æ–±—É–µ–º ElevenLabs (ÔøΩÔøΩ—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–æ)
    try {
      console.log('üî• –≠–¢–ê–ü 1: ELEVENLABS TTS')
      const elevenLabsSuccess = await speakWithElevenLabs(cleanText)

      if (elevenLabsSuccess) {
        console.log('‚úÖ === SUCCESS VIA ELEVENLABS ===')
        return
      }
    } catch (error) {
      console.error('üí• ElevenLabs –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±ÔøΩÔøΩÔøΩÔøΩ–∞:', error)
    }

    // –≠–¢–ê–ü 2: Fallback –Ω–∞ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π TTS
    console.log('üì± –≠–¢–ê–ü 2: BROWSER TTS FALLBACK')
    console.log('üîç speechSynthesis –¥–æ—Å—Ç—É–ø–µ–Ω:', !!speechSynthesis)

    if (speechSynthesis) {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥ÔøΩÔøΩ–Ω–∏–µ
      speechSynthesis.cancel()

      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±–ª—é cancel —É—Å–ø–µ–ª –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å
      setTimeout(() => {
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —ç–º–æ–¥–∑–ª—é –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ªÔøΩÔøΩ –ª—É—á—à–µ–≥–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
        const cleanText = text
          .replace(/[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/gu, '')
          .replace(/[ÔøΩÔøΩ—é¬∑]/g, '')
          .replace(/\n+/g, '. ') // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã –Ω–∞ –ø–∞—É–∑ÔøΩÔøΩÔøΩÔøΩ
          .trim()

        if (cleanText) {
          console.log('üéØ –°–æ–∑–¥–∞–µ–º utterance –¥–ª—è —Ç–µ–∫—Å—Ç–∞:', cleanText.substring(0, 30) + '...')
          const utterance = new SpeechSynthesisUtterance(cleanText)

          // –ü–æ–ª—É—áÔøΩÔøΩ–µ–º –ª—É—á—à–∏–π –≥–æ–ª–æ—Å
          const selectedVoice = getBestMaleVoice()

          if (selectedVoice) {
            utterance.voice = selectedVoice
            console.log('üé§ –ì–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∫–∏:', selectedVoice.name, selectedVoice.lang)
          } else {
            console.log('‚ö†Ô∏è –ì–æ–ª–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
          }

          // –ù–∞—Å—Ç—Ä–æ–πÔøΩÔøΩ–∏ –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏–≤—É—á–∞–Ω–∏—è (–º–µ–Ω–µ–ª—é —Ä–æ–±–æ—Ç–∏—á–Ω–æ)
          utterance.lang = 'ru-RU'
          utterance.rate = 1.0   // –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æÔøΩÔøΩ—Ç—å (–Ω–µ –∑–∞–º–µ–¥–ª–µ–Ω–Ω–∞—è)
          utterance.pitch = 0.95 // –ë–ª–∏–∑–∫–æ –∫ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É (–Ω–µ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ)
          utterance.volume = 0.8 // –ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å

          // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–ª—é–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
          utterance.onstart = () => {
            console.log('üéµ –ù–∞—á–∞–ª–æ –ª—é–∑ÔøΩÔøΩ—É—á–∏–≤–∞–Ω–∏—è')
          }

          utterance.onend = () => {
            console.log('‚úÖ –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
          }

          utterance.onerror = (event) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞ÔøΩÔøΩ–∏—è:', event.error)
          }

          console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º speechSynthesis.speak()')
          speechSynthesis.speak(utterance)
          console.log('ÔøΩÔøΩÔøΩ speechSynthesis.speak() –≤—ã–ø–æ–ª–Ω–µ–Ω')
        }
      }, 100)
    }
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ª—é–æ–ª–æ—Å–∞
  const toggleVoiceMode = () => {
    const newMode = voiceMode === 'text' ? 'voice' : 'text'
    setVoiceMode(newMode)

    // –¢–µÔøΩÔøΩ—Ç–∏—Ä—É–µ–º –≥–æ–ª–æ—Å –ø—Ä–∏ –≤–∫–ª—é—á–µ–ΩÔøΩÔøΩÔøΩ–∏
    if (newMode === 'voice') {
      setTimeout(() => {
        const voices = speechSynthesis.getVoices()
        const russianVoices = voices.filter(v => v.lang.includes('ru') || v.lang.includes('RU'))

        if (russianVoices.length === 0) {
          speakText('–í–Ω–∏–º–∞–Ω–∏–µ! –†—É—Å—Å–∫–∏ÔøΩÔøΩ –≥–æ–ª–æ—ÅÔøΩÔøΩ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ—á–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∑–∫–∏–º.')
        } else {
          speakText('–ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω. –ï—Å–ª–∏ –≥–æ–ª–æ—Å –∑–≤—É—á–∏—Ç —Ä–æ–±–æ—Ç–∏—á–Ω–æ, —ç—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞.')
        }
      }, 300)
    }
  }


  // –§—É–Ω–∫—Ü–∏—è ÔøΩÔøΩÔøΩÔøΩ–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
  const testVoice = () => {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤ÔøΩÔøΩ–Ω–∏–µ –≥–æ–ª–æ—Å–∞ JARVIS...')
    const testPhrase = '–ü—Ä–∏–≤–µ—Ç! –Ø –î–ñ–ê–†–í–ò–°. –≠—Ç–æ —Ç–µ—Å—Ç –º–æ–µ–≥–æ –Ω–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–∞ —á–µ—Ä–µ–∑ ElevenLabs API.'
    speakText(testPhrase)
  }

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto'
      textareaRef.current.style.height = `${Math.min(textareaRef.current.scrollHeight, 200)}px`
    }
  }, [inputText])

  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden'
    } else {
      document.body.style.overflow = 'unset'
    }

    return () => {
      document.body.style.overflow = 'unset'
    }
  }, [isOpen])

  // ÔøΩÔøΩ—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (autoSendTimer) {
        clearTimeout(autoSendTimer)
      }
      if (silenceTimer) {
        clearTimeout(silenceTimer)
      }
    }
  }, [])

  const generateJarvisResponse = async (userMessage: string, conversationHistory: Message[]): Promise<string> => {
    try {
      // –û–±—ã—á–Ω—ã–π —á–∞—Ç-–∑–∞–ø—Ä–æ—Å
      const apiMessages = conversationHistory
        .filter(msg => !msg.text.includes('–ü—Ä–∏–≤ÔøΩÔøΩ—Ç! –Ø –î–ñ–êÔøΩÔøΩ–í—á–∏–°, –≤–∞—à AI-–ø–æ–ºÔøΩÔøΩ—â–Ω–∏–∫!'))
        .map(msg => ({
          role: msg.isUser ? 'user' : 'assistant' as const,
          content: msg.text
        }))

      apiMessages.push({
        role: 'user' as const,
        content: userMessage
      })

      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages: apiMessages,
          sessionId: sessionId.current
        }),
      })

      if (!response.ok) {
        if (response.status === 429) {
          return '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æÔøΩÔøΩ–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æÔøΩÔøΩ–±—â–µ–Ω–∏–µ–º. ‚è≥'
        }
        
        const errorText = await response.text()
        console.error('Chat API error:', errorText)
        return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫ÔøΩÔøΩ –ø—ÄÔøΩÔøΩ –æ–±—Ä–∞–±–æ—Ç–∫ÔøΩÔøΩ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. üòî'
      }

      const data = await response.json()
      
      if (data.error) {
        console.error('Chat API returned error:', data.error)
        return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –øÔøΩÔøΩ–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æÔøΩÔøΩ–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å. ÔøΩÔøΩÔøΩÔøΩ'
      }

      return data.message || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æÔøΩÔøΩ –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ! ü§∑‚Äç‚ôÇÔ∏è'

    } catch (error) {
      console.error('Error generating response:', error)
      return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏ÔøΩÔøΩ–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üåê'
    }
  }

  // –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è –¥ÔøΩÔøΩ—è thinking
  const typeText = async (text: string, speed: number = 30) => {
    return new Promise<void>((resolve) => {
      let i = 0
      const timer = setInterval(() => {
        if (i < text.length) {
          setCurrentThinkingText(prev => prev + text.charAt(i))
          i++
        } else {
          clearInterval(timer)
          resolve()
        }
      }, speed)
    })
  }

  const showThinkingProcess = async (userMessage: string) => {
    // –ë–æ–ª–µ–µ —É–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º—ã—Å–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ø—Ä–æ—ÅÔøΩÔøΩ
    const generateThinking = (message: string) => {
      const lowerMessage = message.toLowerCase()
      const words = lowerMessage.split(' ')

      // –ê–Ω–∞–ªÔøΩÔøΩ–∑–∏—Ä—É–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞
      const isQuestion = message.includes('?') || words.some(w => ['–ª—é–∞–∫', '—á—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞', 'ÔøΩÔøΩÔøΩÔøΩ–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–∫—Ç–æ'].includes(w))
      const isTechnical = words.some(w => ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º', '—Å–∞–π—Ç', '–≤–µ–±', 'javascript', 'react', 'css', 'html', 'api', '–±–∞–∑–∞', '–¥–∞–Ω–Ω—ã—Ö'].includes(w))
      const isPricing = words.some(w => ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ç–∞—Ä–∏—Ñ', '–ø–ª–∞–Ω', '–ø–æ–¥–ø–∏—Å–∫–∞', '–æ–ø–ª–∞—Ç–∞'].includes(w))
      const isGreeting = words.some(w => ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä–æ', 'hello', 'hi'].includes(w))

      if (isGreeting) {
        return [
          '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∑–¥–æ—Ä–æ–≤–∞–ª—Å—è',
          '–û—Ç–≤–µ—á—É –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø—Ä–µ–¥–ª–æ–∂—É –ø–æ–º–æ—â—å'
        ]
      }

      if (isPricing) {
        return [
          '–ó–∞–ø—Ä–æ—Å –æ —Ü–µ–Ω–∞—Ö –∏ —Ç–∞—Ä–∏—Ñ–∞—Ö',
          '–üÔøΩÔøΩ–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
          '–ü–æ–¥–±–µ—Ä—É –æ–ø—Ç–∏–º–∞–ª—åÔøΩÔøΩ—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω'
        ]
      }

      if (isTechnical) {
        return [
          '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å - –∞–ΩÔøΩÔøΩ–ª–∏–∑–∏—Ä—É—é –¥–µ—Ç–∞–ª–∏',
          '–ü–æ–¥–≥–æ—Ç–æ–≤–ª—é –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è',
          'ÔøΩÔøΩ—á—Ç—É –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'
        ]
      }

      if (isQuestion) {
        return [
          '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—É—Ç—å –≤–æ–ø—ÄÔøΩÔøΩ—Å–∞',
          '–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–ª—å–∑—ã',
          '–î–æ–±–∞–≤–ª—é –ø—Ä–∏–º–µ—Ä—ã –∏ –ø—Ä–∞ÔøΩÔøΩ—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã'
        ]
      }

      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
      return [
        '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å',
        '–§–æ—Ä–º–∏—Ä—É—é –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç'
      ]
    }

    const thinkingSteps = generateThinking(userMessage)

    // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ –º—ã—à–ª–µ–Ω–∏—è
    const thinkingBlockId = `thinking_block_${Date.now()}`
    const initialThinkingMessage: Message = {
      id: thinkingBlockId,
      text: 'Thinking...',
      isUser: false,
      timestamp: new Date(),
      isThinking: true,
      isThinkingHeader: true
    }

    setMessages(prev => [...prev, initialThinkingMessage])
    setCurrentThinkingText('')
    await new Promise(resolve => setTimeout(resolve, 200))

    // –ü–µ—á–∞—Ç–∞–µ–º –∫–∞–∂–¥—É—é –º—ã—Å–ª—å —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –ø–µ—á–∞—Ç–∞–Ω–∏—è
    let fullThought = ''
    for (let i = 0; i < thinkingSteps.length; i++) {
      if (i > 0) {
        fullThought += '\n\n'
        setCurrentThinkingText(fullThought)
      }

      const currentStep = thinkingSteps[i]
      await typeText(currentStep, 25) // –ë—ã—Å—Ç—Ä–∞—è –ø–µ—á–∞—Ç—å
      fullThought += currentStep

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      setMessages(prev => prev.map(msg =>
        msg.id === thinkingBlockId
          ? { ...msg, text: `Thinking...\n\n${fullThought}` }
          : msg
      ))

      // –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–ª—é–¥—É –º—ã—Å–ª—è–º–∏
      if (i < thinkingSteps.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 300))
      }
    }

    // –§–∏–Ω–∞ÔøΩÔøΩ—å–Ω–∞—è –ø–∞—É–∑–∞
    await new Promise(resolve => setTimeout(resolve, 400))
  }

  // ÔøΩÔøΩ–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∏ (–æ–±—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É inputText)
  const handleVoiceAutoSend = async (textToSend: string) => {
    if (!textToSend.trim() || isTyping) return

    // –û—á–∏—â–∞–µ–º –≤—Å–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Ç–∞–π–º–µ—Ä—ã –øÔøΩÔøΩ–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (autoSendTimer) {
      clearTimeout(autoSendTimer)
      setAutoSendTimer(null)
    }
    if (silenceTimer) {
      clearTimeout(silenceTimer)
      setSilenceTimer(null)
    }

    const userMessage = textToSend.trim()
    const userMessageId = Date.now().toString()
    const newUserMessage: Message = {
      id: userMessageId,
      text: userMessage,
      isUser: true,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, newUserMessage])
    setInputText('')
    inputTextRef.current = ''
    setIsTyping(true)

    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è
      await showThinkingProcess(userMessage)

      const response = await generateJarvisResponse(userMessage, messages)

      // –£–¥–∞–ª—è–µ–º –±–ª–æ–∫ thinking –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –æ—Ç–≤–µ—Ç–∞
      setMessages(prev => prev.filter(msg => !msg.isThinking))

      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: response,
        isUser: false,
        timestamp: new Date()
      }

      // üöÄ –ó–ê–ü–£–°–ö–ê–ï–ú –ì–û–õ–û–° –°–†–ê–ó–£, –ë–ï–ó –ó–ê–î–ï–†–ñ–ï–ö!
      if (voiceMode === 'voice') {
        console.log('üé§ üöÄ –ú–ì–ù–û–í–ï–ù–ù–´–ô –∑–∞–ø—É—Å–∫ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è (handleVoiceAutoSend):', response.substring(0, 50) + '...')
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è UI
        speakText(response).catch(error => {
          console.error('–û—à–∏–±ÔøΩÔøΩ–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è:', error)
        })
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –û–î–ù–û–í–†–ï–ú–ï–ù–ù–û —Å –≥–æ–ª–æ—Å–æ–º (–±–µ–∑ –ø–∞—É–∑)
      setMessages(prev => [...prev, botMessage])

      if (voiceMode !== 'voice') {
        console.log('üîá –ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω')
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–±—É—á–µÔøΩÔøΩ–∏—è
      await saveInteractionToLearning(userMessage, response, userMessageId)

    } catch (error) {
      console.error('Error in handleVoiceAutoSend:', error)

      // –£–¥–∞–ª—è–µ–º –±–ª–æ–∫ thinking –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setMessages(prev => prev.filter(msg => !msg.isThinking))

      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. üòî',
        isUser: false,
        timestamp: new Date()
      }

      setMessages(prev => [...prev, errorMessage])
    } finally {
      setIsTyping(false)
    }
  }

  const handleSendMessage = async () => {
    if (!inputText.trim() || isTyping) return

    const userMessage = inputText.trim()
    const userMessageId = Date.now().toString()
    const newUserMessage: Message = {
      id: userMessageId,
      text: userMessage,
      isUser: true,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, newUserMessage])
    setInputText('')
    setIsTyping(true)

    try {
      // –ü–æ–∫–∞–∑—ã–≤ÔøΩÔøΩ–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ºÔøΩÔøΩ—à–ª–µ–Ω–∏—è
      await showThinkingProcess(userMessage)

      const response = await generateJarvisResponse(userMessage, messages)

      // –£–¥–∞–ª—è–µ–º –±–ª–æ–∫ thinking –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –æ—Ç–≤–µ—Ç–∞
      setMessages(prev => prev.filter(msg => !msg.isThinking))

      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: response,
        isUser: false,
        timestamp: new Date()
      }

      // üöÄ –ó–ê–ü–£–°–ö–ê–ï–ú –ì–û–õ–û–° –°–†–ê–ó–£, –ë–ï–ó –ó–ê–î–ï–†–ñ–ï–ö!
      if (voiceMode === 'voice') {
        console.log('üé§ üöÄ –ú–ì–ù–û–í–ï–ù–ù–´–ô –∑–∞–ø—É—Å–∫ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è (handleSendMessage):', response.substring(0, 50) + '...')
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è UI
        speakText(response).catch(error => {
          console.error('–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è:', error)
        })
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –û–î–ù–û–í–†–ï–ú–ï–ù–ù–û ÔøΩÔøΩ –≥–æ–ª–æ—Å–æ–º (–±–µ–∑ –ø–∞—É–∑)
      setMessages(prev => [...prev, botMessage])

      if (voiceMode !== 'voice') {
        console.log('üîá –ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω')
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
      await saveInteractionToLearning(userMessage, response, userMessageId)

    } catch (error) {
      console.error('Error in handleSendMessage:', error)

      // –£–¥–∞–ª—è–µ–º –±–ª–æ–∫ thinking –ø—Ä–∏ –æ—à–∏–±ÔøΩÔøΩ–µ
      setMessages(prev => prev.filter(msg => !msg.isThinking))

      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–ª—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. üòî',
        isUser: false,
        timestamp: new Date()
      }

      setMessages(prev => [...prev, errorMessage])
    } finally {
      setIsTyping(false)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (!file) return

    if (file.size > 5 * 1024 * 1024) { // 5MB
      alert('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞ÔøΩÔøΩ—å–Ω—ã–ª—é —Ä–∞–∑–º–µ—Ä: 5MB')
      return
    }

    setIsUploadingFile(true)

    try {
      // –ü—Ä–æ—Å—Ç–æ ÔøΩÔøΩ–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
      const fileMessage: Message = {
        id: Date.now().toString(),
        text: `üìé –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${file.name} (${(file.size / 1024).toFixed(2)} KB)`,
        isUser: true,
        timestamp: new Date()
      }

      setMessages(prev => [...prev, fileMessage])

      const botResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: `‚úÖ –§–∞–πÔøΩÔøΩ "${file.name}" –ø–æ–ª—É—á–µ–Ω! –ö —Å–æ–∂–∞–ª–µ–Ω–∏–ª—é, –æ–±—Ä–∞–ª—é–æ—Ç–∫–∞ —Ñ–∞–πÔøΩÔøΩ–æ–≤ –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å —Å–æ–¥–µ—ÄÔøΩÔøΩ–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Ç–µ–∫—Å—Ç–æ–º, –∏ —è –ø–æ—Å–ª—é–∞—Ä–∞—éÔøΩÔøΩ—å –ø–æ–º–æ—á—å! üìù`,
        isUser: false,
        timestamp: new Date()
      }

      setMessages(prev => [...prev, botResponse])

    } catch (error) {
      console.error('Error handling file upload:', error)
      
      const errorMessage: Message = {
        id: Date.now().toString(),
        text: '–ª—é—à–∏–ª—é–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –ª—é–ª—é',
        isUser: false,
        timestamp: new Date()
      }
      
      setMessages(prev => [...prev, errorMessage])
    } finally {
      setIsUploadingFile(false)
      if (fileInputRef.current) {
        fileInputRef.current.value = ''
      }
    }
  }

  const clearChat = () => {
    setMessages([{
      id: '1',
      text: '–ü—Ä–∏–≤–µ—Ç! –Ø –î–ñ–ê–†–í–ò–° - –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –Ω–∞—à–µ–≥–æ —Å–∞–π—Ç–∞! üòä\n\n–ü–æ–º–æ–≥—É –≤—ã–±ÔøΩÔøΩ–∞—Ç—å —É—Å–ª—É–≥–∏, —Ä–∞—Å—Å–∫–∞–∂—É –æ —Ç–∞—Ä–∏—Ñ–∞—Ö –∏ –æ—Ç–≤–µ—á—É –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã\n\n–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?',
      isUser: false,
      timestamp: new Date()
    }])
    setInteractionIds({})
    setCurrentThinkingText('')
  }

  if (!isOpen) return null

  return (
    <div className={`jarvis-chat-overlay ${isDarkTheme ? 'dark-theme' : ''}`}>
      <div className="jarvis-chat-container">
        <div className="jarvis-chat-header">
          <div className="header-info">
            <div className="jarvis-avatar">
              <img
                src="https://cdn.builder.io/api/v1/image/assets%2F321030175d41423db42a978adc722c81%2F37b07a37d18e47b9a7c20f69c11e21f0?format=webp&width=800"
                alt="JARVIS"
                width="32"
                height="32"
              />
            </div>
            <div className="header-text">
              <h3>–î–ñ–ê–†–í–ò–°</h3>
              <span className="status">AI –ü–æ–º–æ—â–Ω–∏–∫ –û–Ω–ª–∞–π–Ω</span>
            </div>
          </div>
          <div className="header-actions">
            <button
              className={`voice-mode-btn ${voiceMode === 'voice' ? 'active' : ''}`}
              onClick={toggleVoiceMode}
              title={`–ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º: ${voiceMode === 'voice' ? '–í–ö–õ' : '–í–´–ö–õ'}`}
            >
              {voiceMode === 'voice' ? (
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                  <path d="M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  <path d="m19 10-2 2-2-2" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  <path d="M5 10v2a7 7 0 0 0 14 0v-2" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  <line x1="12" y1="19" x2="12" y2="23" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                  <line x1="8" y1="23" x2="16" y2="23" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                </svg>
              ) : (
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                  <path d="M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  <path d="M5 10v2a7 7 0 0 0 14 0v-2" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  <line x1="12" y1="19" x2="12" y2="23" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                  <line x1="8" y1="23" x2="16" y2="23" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                  <path d="m17 14 2-2-2-2" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                </svg>
              )}
            </button>
            {voiceMode === 'voice' && (
              <>
                <button
                  className="test-voice-btn"
                  onClick={testVoice}
                  title="–¢–µ—Å—Ç –≥–æ–ª–æ—Å–∞"
                >
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                    <polygon points="11 5,6 9,2 9,2 15,6 15,11 19,11 5" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    <path d="M15.54 8.46a5 5 0 0 1 0 7.07" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    <path d="M19.07 4.93a10 10 0 0 1 0 14.14" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  </svg>
                </button>
              </>
            )}
            <button className="clear-chat-btn" onClick={clearChat} title="–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                <path d="M3 6h18M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                <line x1="10" y1="11" x2="10" y2="17" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                <line x1="14" y1="11" x2="14" y2="17" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
              </svg>
            </button>
            <button className="close-btn" onClick={onClose}>
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                <path d="M18 6L6 18M6 6l12 12" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
              </svg>
            </button>
          </div>
        </div>

        <div className="jarvis-chat-messages">
          {messages.map((message) => (
            <div key={message.id} className={`message ${message.isUser ? 'user-message' : 'bot-message'} ${message.isThinking ? 'thinking-message' : ''}`}>
              {!message.isUser && (
                <div className="message-avatar">
                  <img
                    src="https://cdn.builder.io/api/v1/image/assets%2F321030175d41423db42a978adc722c81%2F37b07a37d18e47b9a7c20f69c11e21f0?format=webp&width=800"
                    alt="JARVIS"
                    width="28"
                    height="28"
                  />
                </div>
              )}
              <div className="message-content">
                <div
                  className={`message-text ${message.isThinking ? 'thinking-text' : ''}`}
                  style={{ whiteSpace: 'pre-wrap' }}
                >
                  {message.isThinking ? (
                    <div>
                      <div className="thinking-title">ü§î –î—É–º–∞—é...</div>
                      <div className="thinking-content">
                        {message.text.replace('Thinking...\n\n', '')}
                        <span className="thinking-cursor">|</span>
                      </div>
                    </div>
                  ) : (
                    <div>
                      {/* –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º markdown –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ */}
                      {message.text.includes('![') && message.text.includes('](') ? (
                        <div>
                          {message.text.split(/(\!\[.*?\]\(.*?\))/g).map((part, index) => {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ markdown –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                            const imageMatch = part.match(/\!\[(.*?)\]\((.*?)\)/)
                            if (imageMatch) {
                              const [, altText, imageUrl] = imageMatch
                              return (
                                <div key={index} className="generated-image-container">
                                  <img
                                    src={imageUrl}
                                    alt={altText}
                                    className="generated-image"
                                    style={{
                                      maxWidth: '100%',
                                      maxHeight: '400px',
                                      borderRadius: '8px',
                                      margin: '10px 0',
                                      boxShadow: '0 4px 8px rgba(0,0,0,0.1)'
                                    }}
                                    onError={(e) => {
                                      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imageUrl)
                                      e.currentTarget.style.display = 'none'
                                    }}
                                  />
                                </div>
                              )
                            }
                            return part
                          })}
                        </div>
                      ) : (
                        message.text
                      )}
                    </div>
                  )}
                </div>
                {!message.isThinking && (
                  <div className="message-time">
                    {message.timestamp.toLocaleTimeString('ru-RU', {
                      hour: '2-digit',
                      minute: '2-digit'
                    })}
                  </div>
                )}
              </div>
              {!message.isUser && !message.isThinking && interactionIds[message.id] && (
                <MessageFeedback
                  interactionId={interactionIds[message.id]}
                  messageId={message.id}
                />
              )}
            </div>
          ))}
          
          {isTyping && (
            <div className="message bot-message">
              <div className="message-avatar">
                <img
                  src="https://cdn.builder.io/api/v1/image/assets%2F321030175d41423db42a978adc722c81%2F37b07a37d18e47b9a7c20f69c11e21f0?format=webp&width=800"
                  alt="JARVIS"
                  width="28"
                  height="28"
                />
              </div>
              <div className="message-content">
                <div className="typing-indicator">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </div>
            </div>
          )}
          
          <div ref={messagesEndRef} />
        </div>

        <div className="jarvis-chat-input">
          {isListening && (
            <div className="auto-send-indicator">
              üé§ –°–ª—É—à–∞—é... –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ—á–∏
            </div>
          )}
          <div className="input-container">
            <textarea
              ref={textareaRef}
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={isListening ? "–ì–æ–≤–æ—Ä–∏—Ç–µ..." : "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."}
              className="jarvis-message-input"
              rows={1}
              disabled={isTyping}
            />

            <div className="input-buttons">
              <input
                type="file"
                ref={fileInputRef}
                onChange={handleFileUpload}
                style={{ display: 'none' }}
                accept=".txt,.pdf,.doc,.docx,.md"
              />
              <button
                className={`jarvis-attachment-btn ${isUploadingFile ? 'uploading' : ''}`}
                onClick={() => fileInputRef.current?.click()}
                disabled={isUploadingFile}
                title="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª"
              >
                {isUploadingFile ? (
                  <div className="loading-spinner"></div>
                ) : (
                  <svg width="18" height="18" viewBox="0 0 24 24" fill="none">
                    <path d="M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66L9.64 16.2a2 2 0 0 1-2.83-2.83l8.49-8.49" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  </svg>
                )}
              </button>

              {recognition && (
                <button
                  className={`jarvis-mic-btn ${isListening ? 'listening' : ''}`}
                  onClick={isListening ? stopListening : startListening}
                  disabled={isTyping}
                  title={isListening ? "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫ –ø–æ—Å–ª–µ —Ä–µ—á–∏)" : "–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ (–∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫ –ø–æ—Å–ª–µ —Ä–µ—á–∏)"}
                >
                  {isListening ? (
                    <div className="mic-recording">
                      <svg width="18" height="18" viewBox="0 0 24 24" fill="none">
                        <path d="M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z" fill="currentColor"/>
                        <path d="M5 10v2a7 7 0 0 0 14 0v-2" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                        <line x1="12" y1="19" x2="12" y2="23" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                        <line x1="8" y1="23" x2="16" y2="23" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                      </svg>
                    </div>
                  ) : (
                    <svg width="18" height="18" viewBox="0 0 24 24" fill="none">
                      <path d="M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                      <path d="M5 10v2a7 7 0 0 0 14 0v-2" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                      <line x1="12" y1="19" x2="12" y2="23" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                      <line x1="8" y1="23" x2="16" y2="23" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                    </svg>
                  )}
                </button>
              )}

              <button
                className={`jarvis-send-btn ${!inputText.trim() || isTyping ? 'disabled' : ''}`}
                onClick={handleSendMessage}
                disabled={!inputText.trim() || isTyping}
              >
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                  <path d="M22 2L11 13M22 2l-7 20-4-9-9-4 20-7z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>

      <style jsx>{`
        .jarvis-chat-overlay {
          position: fixed;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background: rgba(0, 0, 0, 0.8);
          display: flex;
          align-items: stretch;
          justify-content: stretch;
          z-index: 10000;
          padding: 0;
        }

        .jarvis-chat-container {
          background: #ffffff;
          border-radius: 0;
          box-shadow: none;
          width: 100%;
          max-width: none;
          height: 100%;
          display: flex;
          flex-direction: column;
          overflow: hidden;
        }

        .dark-theme .jarvis-chat-container {
          background: #1a1a1a;
          color: #ffffff;
        }

        .jarvis-chat-header {
          background: #f8f9fa;
          border-bottom: 1px solid #e9ecef;
          padding: 16px 20px;
          display: flex;
          align-items: center;
          justify-content: space-between;
        }

        .dark-theme .jarvis-chat-header {
          background: #2d2d2d;
          border-bottom: 1px solid #404040;
        }

        .header-info {
          display: flex;
          align-items: center;
          gap: 12px;
        }

        .jarvis-avatar {
          width: 32px;
          height: 32px;
          border-radius: 50%;
          overflow: hidden;
          display: flex;
          align-items: center;
          justify-content: center;
          background: #f0f0f0;
        }

        .jarvis-avatar img {
          width: 100%;
          height: 100%;
          object-fit: cover;
        }

        .header-text h3 {
          margin: 0;
          font-size: 16px;
          font-weight: 600;
          color: #000000;
        }

        .dark-theme .header-text h3 {
          color: #ffffff;
        }

        .status {
          font-size: 12px;
          color: #10b981;
          font-weight: 500;
        }

        .header-actions {
          display: flex;
          gap: 8px;
        }

        .voice-mode-btn,
        .test-voice-btn,
        .clear-chat-btn,
        .close-btn {
          background: none;
          border: none;
          color: #666666;
          cursor: pointer;
          padding: 8px;
          border-radius: 8px;
          transition: all 0.2s;
          display: flex;
          align-items: center;
          justify-content: center;
        }

        .voice-mode-btn:hover,
        .test-voice-btn:hover,
        .clear-chat-btn:hover,
        .close-btn:hover {
          background: #f0f0f0;
          color: #000000;
        }

        .voice-mode-btn.active {
          background: #10b981;
          color: #ffffff;
        }

        .voice-mode-btn.active:hover {
          background: #059669;
        }

        .test-voice-btn {
          color: #3b82f6;
        }

        .test-voice-btn:hover {
          background: #dbeafe;
          color: #1d4ed8;
        }


        .dark-theme .voice-mode-btn,
        .dark-theme .test-voice-btn,
        .dark-theme .clear-chat-btn,
        .dark-theme .close-btn {
          color: #cccccc;
        }

        .dark-theme .voice-mode-btn:hover,
        .dark-theme .test-voice-btn:hover,
        .dark-theme .clear-chat-btn:hover,
        .dark-theme .close-btn:hover {
          background: #404040;
          color: #ffffff;
        }

        .dark-theme .voice-mode-btn.active {
          background: #10b981;
          color: #ffffff;
        }

        .dark-theme .test-voice-btn {
          color: #60a5fa;
        }

        .dark-theme .test-voice-btn:hover {
          background: #1e3a8a;
          color: #93c5fd;
        }


        .jarvis-chat-messages {
          flex: 1;
          overflow-y: auto;
          padding: 24px 40px;
          display: flex;
          flex-direction: column;
          gap: 16px;
          max-width: 100%;
          background: #ffffff;
        }

        .message {
          display: flex;
          align-items: flex-start;
          gap: 12px;
          width: 100%;
        }

        .user-message {
          flex-direction: row-reverse;
          justify-content: flex-start;
        }

        .message-avatar {
          width: 30px;
          height: 30px;
          border-radius: 6px;
          overflow: hidden;
          flex-shrink: 0;
          display: flex;
          align-items: center;
          justify-content: center;
          background: #10a37f;
          margin-top: 4px;
        }

        .message-avatar img {
          width: 100%;
          height: 100%;
          object-fit: cover;
        }

        .message-content {
          max-width: 80%;
          display: flex;
          flex-direction: column;
          gap: 4px;
          word-wrap: break-word;
          overflow-wrap: break-word;
          min-width: 0;
        }

        .user-message .message-content {
          align-items: flex-end;
        }

        .message-text {
          background: #f7f7f8;
          padding: 12px 16px;
          border-radius: 18px;
          color: #374151;
          line-height: 1.5;
          font-size: 14px;
          word-break: normal;
          overflow-wrap: break-word;
          white-space: pre-wrap;
          max-width: 100%;
          display: block;
          border: 1px solid #e5e7eb;
        }

        .user-message .message-text {
          background: #2563eb;
          color: #ffffff;
          border: 1px solid #2563eb;
          white-space: pre-wrap;
        }

        .dark-theme .jarvis-chat-messages {
          background: #212121;
        }

        .dark-theme .message-text {
          background: #2f2f2f;
          color: #ececec;
          border: 1px solid #404040;
        }

        .dark-theme .user-message .message-text {
          background: #2563eb;
          color: #ffffff;
          border: 1px solid #2563eb;
        }

        .message-time {
          font-size: 11px;
          color: #9ca3af;
          padding: 0 4px;
          margin-top: 4px;
          font-weight: 400;
        }

        .typing-indicator {
          background: #f7f7f8;
          padding: 12px 16px;
          border-radius: 18px;
          display: flex;
          gap: 4px;
          align-items: center;
          border: 1px solid #e5e7eb;
        }

        .dark-theme .typing-indicator {
          background: #2f2f2f;
          border: 1px solid #404040;
        }

        .typing-indicator span {
          width: 6px;
          height: 6px;
          background: #999999;
          border-radius: 50%;
          animation: typing 1.4s infinite ease-in-out;
        }

        .typing-indicator span:nth-child(1) { animation-delay: 0s; }
        .typing-indicator span:nth-child(2) { animation-delay: 0.2s; }
        .typing-indicator span:nth-child(3) { animation-delay: 0.4s; }

        @keyframes typing {
          0%, 80%, 100% {
            transform: scale(0.8);
            opacity: 0.5;
          }
          40% {
            transform: scale(1);
            opacity: 1;
          }
        }

        .jarvis-chat-input {
          background: #f8f9fa;
          border-top: 1px solid #e9ecef;
          padding: 16px 40px;
        }

        .dark-theme .jarvis-chat-input {
          background: #2d2d2d;
          border-top: 1px solid #404040;
        }

        .auto-send-indicator {
          background: linear-gradient(135deg, #10b981, #059669);
          color: #ffffff;
          padding: 8px 16px;
          border-radius: 12px;
          font-size: 12px;
          text-align: center;
          margin-bottom: 12px;
          box-shadow: 0 2px 8px rgba(16, 185, 129, 0.3);
          animation: autosend-pulse 2s infinite;
        }

        @keyframes autosend-pulse {
          0%, 100% {
            transform: scale(1);
            box-shadow: 0 2px 8px rgba(16, 185, 129, 0.3);
          }
          50% {
            transform: scale(1.02);
            box-shadow: 0 4px 12px rgba(16, 185, 129, 0.5);
          }
        }

        .dark-theme .auto-send-indicator {
          background: linear-gradient(135deg, #10b981, #059669);
          box-shadow: 0 2px 8px rgba(16, 185, 129, 0.4);
        }

        .input-container {
          display: flex;
          align-items: center;
          gap: 12px;
          background: #ffffff;
          border-radius: 24px;
          padding: 12px 16px;
          border: 2px solid transparent;
          transition: border-color 0.2s;
        }

        .input-container:focus-within {
          border-color: #007bff;
        }

        .dark-theme .input-container {
          background: #404040;
          border-color: transparent;
        }

        .dark-theme .input-container:focus-within {
          border-color: #0056b3;
        }

        .input-buttons {
          display: flex;
          align-items: center;
          gap: 8px;
        }

        .jarvis-attachment-btn,
        .jarvis-mic-btn {
          background: none;
          border: none;
          color: #666666;
          cursor: pointer;
          padding: 8px;
          border-radius: 50%;
          transition: all 0.2s;
          display: flex;
          align-items: center;
          justify-content: center;
          width: 36px;
          height: 36px;
        }

        .jarvis-attachment-btn:hover,
        .jarvis-mic-btn:hover {
          background: #f0f0f0;
          color: #007bff;
        }

        .jarvis-attachment-btn.uploading {
          color: #007bff;
          cursor: not-allowed;
        }

        .jarvis-mic-btn.listening {
          background: #ef4444;
          color: #ffffff;
          animation: pulse 2s infinite;
        }

        .jarvis-mic-btn.listening:hover {
          background: #dc2626;
        }

        @keyframes pulse {
          0% { transform: scale(1); }
          50% { transform: scale(1.1); }
          100% { transform: scale(1); }
        }

        .mic-recording {
          position: relative;
        }

        .mic-recording::after {
          content: '';
          position: absolute;
          top: -2px;
          left: -2px;
          right: -2px;
          bottom: -2px;
          border: 2px solid #ef4444;
          border-radius: 50%;
          animation: recordingRing 1.5s infinite;
        }

        @keyframes recordingRing {
          0% { transform: scale(1); opacity: 1; }
          100% { transform: scale(1.5); opacity: 0; }
        }

        .dark-theme .jarvis-attachment-btn,
        .dark-theme .jarvis-mic-btn {
          color: #cccccc;
        }

        .dark-theme .jarvis-attachment-btn:hover,
        .dark-theme .jarvis-mic-btn:hover {
          background: #555555;
          color: #ffffff;
        }

        .dark-theme .jarvis-mic-btn.listening {
          background: #ef4444;
          color: #ffffff;
        }

        .loading-spinner {
          width: 14px;
          height: 14px;
          border: 2px solid #e5e7eb;
          border-top: 2px solid #007bff;
          border-radius: 50%;
          animation: spin 1s linear infinite;
        }

        @keyframes spin {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }

        .jarvis-message-input {
          flex: 1;
          background: none;
          border: none;
          outline: none;
          font-size: 14px;
          line-height: 1.4;
          resize: none;
          min-height: 24px;
          max-height: 120px;
          color: #000000;
          font-family: inherit;
          padding: 0;
        }

        .jarvis-message-input::placeholder {
          color: #999999;
        }

        .dark-theme .jarvis-message-input {
          color: #ffffff;
        }

        .dark-theme .jarvis-message-input::placeholder {
          color: #cccccc;
        }

        .jarvis-send-btn {
          background: #007bff;
          border: none;
          color: #ffffff;
          cursor: pointer;
          padding: 8px;
          border-radius: 50%;
          transition: all 0.2s;
          display: flex;
          align-items: center;
          justify-content: center;
          width: 36px;
          height: 36px;
        }

        .jarvis-send-btn:hover:not(.disabled) {
          background: #0056b3;
          transform: scale(1.05);
        }

        .jarvis-send-btn.disabled {
          background: #cccccc;
          cursor: not-allowed;
          transform: none;
        }

        .dark-theme .jarvis-send-btn.disabled {
          background: #555555;
        }

        /* –°—Ç–∏–ª–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –º—ã—àÔøΩÔøΩÔøΩÔøΩ–Ω–∏—è */
        .thinking-message {
          opacity: 0.8;
        }

        .thinking-text {
          background: #f8f9fa !important;
          border: 1px solid #e1e5e9 !important;
          border-left: 3px solid #6366f1 !important;
          color: #495057 !important;
          font-family: 'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace !important;
          font-size: 12px !important;
          line-height: 1.4 !important;
          padding: 10px 14px !important;
          border-radius: 6px !important;
          white-space: pre-line !important;
          max-width: 80% !important;
        }

        .thinking-text .thinking-title {
          font-weight: 600;
          color: #6366f1;
          margin-bottom: 8px;
          font-size: 12px;
          display: flex;
          align-items: center;
          gap: 4px;
        }

        .thinking-content {
          position: relative;
        }

        .thinking-cursor {
          animation: blink 1s infinite;
          color: #6366f1;
          font-weight: bold;
        }

        @keyframes blink {
          0%, 50% { opacity: 1; }
          51%, 100% { opacity: 0; }
        }

        .dark-theme .thinking-text {
          background: #1e1e1e !important;
          border: 1px solid #333 !important;
          border-left: 4px solid #6366f1 !important;
          color: #e1e5e9 !important;
        }

        .dark-theme .thinking-text .thinking-title {
          color: #8b9dd4;
        }

        .dark-theme .thinking-cursor {
          color: #8b9dd4;
        }

        /* ================================
           MOBILE RESPONSIVE FIXES
           ================================ */
        @media (max-width: 768px) {
          .jarvis-chat-messages {
            padding: 12px;
            gap: 6px;
          }

          .message {
            max-width: 100%;
            gap: 6px;
            margin-bottom: 8px;
          }

          /* Hide avatar on mobile for more space */
          .message-avatar {
            display: none;
          }

          .message-content {
            max-width: 95%;
          }

          .user-message .message-content {
            max-width: 85%;
            margin-left: auto;
          }

          .bot-message .message-content {
            max-width: 85%;
            margin-right: auto;
          }

          .message-text {
            padding: 10px 12px;
            font-size: 14px;
            line-height: 1.4;
            border-radius: 16px;
            max-width: 100%;
          }

          .user-message .message-text {
            background: #007bff;
            color: #ffffff;
            border-radius: 16px 16px 4px 16px;
          }

          .bot-message .message-text {
            background: #f1f3f4;
            color: #374151;
            border-radius: 16px 16px 16px 4px;
            border: 1px solid #e5e7eb;
          }

          .dark-theme .bot-message .message-text {
            background: #2f2f2f;
            color: #ececec;
            border: 1px solid #404040;
          }

          .message-time {
            font-size: 10px;
            padding: 0 8px;
            margin-top: 2px;
          }

          .user-message .message-time {
            text-align: right;
          }

          .bot-message .message-time {
            text-align: left;
          }

          .typing-indicator {
            padding: 10px 12px;
            border-radius: 16px 16px 16px 4px;
            background: #f1f3f4;
          }

          .dark-theme .typing-indicator {
            background: #2f2f2f;
          }

          /* Thinking message mobile styles */
          .thinking-text {
            max-width: 95% !important;
            font-size: 11px !important;
            padding: 8px 12px !important;
          }

          /* Generated image styles for mobile */
          .generated-image-container {
            margin: 8px 0;
          }

          .generated-image {
            max-width: 100% !important;
            max-height: 250px !important;
            border-radius: 12px !important;
          }
        }

        /* Extra small mobile devices */
        @media (max-width: 480px) {
          .message-content {
            max-width: 98%;
          }

          .user-message .message-content {
            max-width: 90%;
          }

          .bot-message .message-content {
            max-width: 90%;
          }

          .message-text {
            padding: 8px 10px;
            font-size: 13px;
          }

          .thinking-text {
            max-width: 98% !important;
            font-size: 10px !important;
          }

          .generated-image {
            max-height: 200px !important;
          }
        }

      `}</style>
    </div>
  )
}
