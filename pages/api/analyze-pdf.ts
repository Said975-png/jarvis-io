import type { NextApiRequest, NextApiResponse } from 'next'
import multer from 'multer'
import pdfParse from 'pdf-parse'

interface AnalyzePdfResponse {
  message: string
  error?: string
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–º—è—Ç–∏
const upload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 10 * 1024 * 1024 // 10MB –ª–∏–º–∏—Ç
  },
  fileFilter: (req, file, cb) => {
    if (file.mimetype === 'application/pdf') {
      cb(null, true)
    } else {
      cb(new Error('–¢–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã'))
    }
  }
})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ PDF —á–µ—Ä–µ–∑ GROQ API
async function analyzePdfContent(pdfText: string): Promise<string> {
  const groqApiKey = process.env.GROQ_API_KEY
  
  if (!groqApiKey) {
    throw new Error('GROQ API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
  }

  const systemMessage = {
    role: 'system' as const,
    content: `–¢—ã –î–ñ–ê–†–í–ò–° - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ PDF —Ñ–∞–π–ª–∞ –∏ –¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

üìã –ó–ê–î–ê–ß–ò –ê–ù–ê–õ–ò–ó–ê:
- –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–¥–æ–≥–æ–≤–æ—Ä, –æ—Ç—á–µ—Ç, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –∫–Ω–∏–≥–∞, —Å—Ç–∞—Ç—å—è –∏ —Ç.–¥.)
- –í—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –∏ —Ç–µ–º—ã
- –ù–∞–π–¥–∏ –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–¥–∞—Ç—ã, —á–∏—Å–ª–∞, –∏–º–µ–Ω–∞, —Å—É–º–º—ã)
- –û–ø–∏—à–∏ –≥–ª–∞–≤–Ω—É—é –∏–¥–µ—é –∏–ª–∏ —Ü–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞
- –û—Ç–º–µ—Ç—å –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ –¥–µ—Ç–∞–ª–∏
- –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ —Å–ø–∏—Å–∫–∏ - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏—Ö
- –ü—Ä–æ–≤–µ—Ä—å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

üí° –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
- –ò—Å–ø–æ–ª—å–∑—É–π —á–µ—Ç–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å —ç–º–æ–¥–∑–∏
- –ü–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –Ω–æ –ø–æ —Å—É—â–µ—Å—Ç–≤—É
- –í—ã–¥–µ–ª—è–π –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

üéØ –ë–£–î–¨ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –¢–û–ß–ù–´–ú –ò –ü–û–õ–ï–ó–ù–´–ú!`
  }

  const userMessage = {
    role: 'user' as const,
    content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç PDF –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ –≤ –Ω–µ–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è:

${pdfText}`
  }

  const requestBody = {
    model: 'llama-3.1-8b-instant',
    messages: [systemMessage, userMessage],
    temperature: 0.2,
    max_tokens: 3000,
    top_p: 0.9
  }

  const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${groqApiKey}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(requestBody)
  })

  if (!response.ok) {
    throw new Error(`GROQ API –æ—à–∏–±–∫–∞: ${response.status}`)
  }

  const data = await response.json()
  
  if (!data.choices || !data.choices[0] || !data.choices[0].message) {
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç GROQ API')
  }

  return data.choices[0].message.content
}

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
function runMiddleware(req: any, res: any, fn: any) {
  return new Promise((resolve, reject) => {
    fn(req, res, (result: any) => {
      if (result instanceof Error) {
        return reject(result)
      }
      return resolve(result)
    })
  })
}

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<AnalyzePdfResponse>
) {
  const timestamp = new Date().toISOString()
  console.log(`[${timestamp}] === PDF ANALYSIS REQUEST ===`)

  if (req.method !== 'POST') {
    return res.status(405).json({ 
      message: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', 
      error: 'Method not allowed' 
    })
  }

  try {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞
    await runMiddleware(req as any, res, upload.single('pdf'))
    
    const file = (req as any).file
    
    if (!file) {
      return res.status(400).json({ 
        message: 'PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω', 
        error: 'No file uploaded' 
      })
    }

    console.log(`[${timestamp}] PDF file received:`, {
      filename: file.originalname,
      size: file.size,
      mimetype: file.mimetype
    })

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ PDF
    const pdfData = await pdfParse(file.buffer)
    const pdfText = pdfData.text

    console.log(`[${timestamp}] PDF text extracted:`, {
      pages: pdfData.numpages,
      textLength: pdfText.length,
      preview: pdfText.substring(0, 200) + '...'
    })

    if (!pdfText || pdfText.trim().length === 0) {
      return res.status(400).json({ 
        message: 'PDF —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞', 
        error: 'Empty PDF content' 
      })
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è API
    const maxTextLength = 15000 // –ü—Ä–∏–º–µ—Ä–Ω–æ 3000 —Ç–æ–∫–µ–Ω–æ–≤
    const truncatedText = pdfText.length > maxTextLength 
      ? pdfText.substring(0, maxTextLength) + '\n\n[–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–∞...]'
      : pdfText

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ GROQ API
    const analysis = await analyzePdfContent(truncatedText)

    console.log(`[${timestamp}] PDF analysis completed:`, {
      analysisLength: analysis.length,
      preview: analysis.substring(0, 200) + '...'
    })

    const finalResponse = `üìÑ –ê–ù–ê–õ–ò–ó PDF –î–û–ö–£–ú–ï–ù–¢–ê "${file.originalname}"

${analysis}

üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –§–ê–ô–õ–ï:
‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü: ${pdfData.numpages}
‚Ä¢ –†–∞–∑–º–µ—Ä: ${Math.round(file.size / 1024)} –ö–ë
‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞: ${pdfText.length.toLocaleString()}

‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ó–∞–¥–∞–≤–∞–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É.`

    return res.status(200).json({ message: finalResponse })

  } catch (error) {
    console.error(`[${timestamp}] PDF analysis error:`, error)
    
    const errorMessage = `–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ PDF —Ñ–∞–π–ª–∞! üòÖ

üîß –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:
‚Ä¢ –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º
‚Ä¢ PDF —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–ª–∏–º–∏—Ç 10MB)
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞

üí° –ü–û–ü–†–û–ë–£–ô–¢–ï:
‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π PDF —Ñ–∞–π–ª
‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –∑–∞—â–∏—â–µ–Ω
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ PDF —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç

–ò–ª–∏ –∑–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã!`

    return res.status(500).json({ 
      message: errorMessage,
      error: error instanceof Error ? error.message : 'Unknown error'
    })
  }
}

// –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–µ—Ä body –¥–ª—è multer
export const config = {
  api: {
    bodyParser: false,
  },
}
